#!/usr/bin/env bash

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

source "${SCRIPT_DIR}"/.venv/bin/activate
cd "${SCRIPT_DIR}"/source || exit 1

read -r -d '' inverter_setup_code <<EOF
from logger import LoggerMixin
from goodwe.et import OperationMode
from inverter import Inverter

LoggerMixin().log.info("Inverter is manually controlled by the user ${USER}")

inverter = Inverter(True)
EOF


if [[ ! ${1} =~ ^(--status|--mode|--tibber)$ ]]; then
	echo "This script allows you to interact with the inverter."
	echo ""
	echo "You have to supply one of the following arguments:"
	echo " --status                    Get the current state of charge and operation mode of the inverter"
	echo " --mode {GENERAL,ECO_CHARGE} Set the operation mode of the inverter"
	echo " --tibber                    Fetches, displays the tibber rates and writes them to the database"
	echo ""
	echo "It uses the all the variables defined in the .env file"
	exit 1
fi

if [[ ${1} == "--status" ]]; then
	python3 - << EOF
${inverter_setup_code}
try:
	mode = inverter.get_operation_mode(True).name
	soc = inverter.get_state_of_charge(True)
	print(f"SoC: {soc} %\nmode: {mode}")
except Exception as e:
	inverter.log.exception(e)
	exit(1)
EOF
	exit $?
fi

if [[ ${1} == "--mode" ]]; then
	if [[ ! ${2} =~ ^(GENERAL|ECO_CHARGE)$ ]]; then
		echo "Unsupported mode, valid modes are \"GENERAL\" and \"ECO_CHARGE\""
		exit 1
	fi

	python3 - << EOF
${inverter_setup_code}
try:
	last_mode = inverter.get_operation_mode(True).name
	inverter.set_operation_mode(OperationMode.${2})
	print(f"last mode: {last_mode}\nnew mode: ${2}")
except Exception as e:
	inverter.log.exception(e)
	exit(1)
EOF
	exit $?
fi

if [[ ${1} == "--tibber" ]]; then
	python3 - << EOF
from tibber_api_handler import TibberAPIHandler
try:
	tibber_api_handler = TibberAPIHandler()
	api_result = tibber_api_handler._fetch_upcoming_prices_from_api()
	all_energy_rates = tibber_api_handler._extract_energy_rates_from_api_response(api_result)
	tibber_api_handler._remove_energy_rates_from_the_past(all_energy_rates)
	tibber_api_handler.write_energy_rates_to_database(all_energy_rates)
except Exception as e:
	tibber_api_handler.log.exception(e)
	exit(1)
EOF
	exit $?
fi
